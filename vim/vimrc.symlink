" 
" Use vim settings, rather then vi settings (much better!)
" This must be first, because it changes other options as a side effect.
  set nocompatible

  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
  endif


  call plug#begin('~/.vim/plugged')
  Plug 'scrooloose/nerdcommenter'
  Plug 'ervandew/supertab'
  Plug 'nelstrom/vim-mac-classic-theme'
  Plug 'tpope/vim-unimpaired'
  Plug 'msanders/snipmate.vim'
  Plug 'kien/ctrlp.vim'
  Plug 'altercation/vim-colors-solarized'
  Plug 'derekwyatt/vim-scala'
  Plug 'chrisbra/csv.vim'
  Plug 'vim-scripts/vimwiki'
  Plug 'airblade/vim-gitgutter'
  Plug 'tpope/vim-fugitive'
  Plug 'plasticboy/vim-markdown'
  Plug 'bling/vim-airline'
  Plug 'takac/vim-fontmanager'
  Plug 'tpope/vim-jdaddy'
  "select the closest text objects
  Plug 'gcmt/wildfire.vim'
  "base16 colorscheme
  Plug 'chriskempson/base16-vim'
  Plug 'vim-scripts/BufOnly.vim'
  Plug 'vim-scripts/MultipleSearch'
  Plug 'scrooloose/syntastic'
  Plug 'vim-scripts/AnsiEsc.vim'
  Plug 'fatih/vim-go'
  Plug 'kylef/apiblueprint.vim'
  " run tmux command from vim
  Plug 'benmills/vimux'
  " text
  Plug 'rhysd/vim-grammarous'  " Grammar check using languagetool
  " vim an tmux navigation using same keys
  Plug 'christoomey/vim-tmux-navigator'
  " colorscheme
  Plug 'morhetz/gruvbox'
  Plug 'godlygeek/tabular'
  Plug 'junegunn/vim-xmark', has('mac') ? { 'do' : 'make'} : { 'on': [] }
  " vim sugar for the unix sheel commands: :Move, :Mkdir, etc
  Plug 'tpope/vim-eunuch'
  call plug#end()
        
  let mapleader=","

  "VIM home to 
  if has('win32') || has ('win64')
      let $VIMHOME = $HOME."\\vimfiles"
  else
      let $VIMHOME = $HOME."/.vim"
  endif

  if has('nvim')
    set termguicolors
    " exit the input mode in for terminal
    tnoremap jj <C-\><C-n>
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l
  endif
  "let $VIMHOME=expand('<sfile>:p:h')

" Editing Behaviour {{{
  syntax on
  " force 256 colors
  set t_Co=256
  set number
  set autoindent

  set expandtab               "insert space instead <Tab>
  set tabstop=2
  set softtabstop=2
  set shiftwidth=2

  set smartcase "Use case insensitive search, except when using capital letters
  set ignorecase
  set showmatch "highlight matching braces
  set incsearch "Find when typing
  set hlsearch
  set noswapfile

  set iskeyword +=- "treat '-' as part of word 

  "to open files only in unix format, for windows display ^M for endlines
  set fileformats=unix

  " set encoding=utf-8

  let g:gruvbox_guisp_fallback='fg'
  colorscheme gruvbox

  set background=dark
  " clear SignColumn (same as line number column)
  highlight clear SignColumn
  "color solarized
  "highlight current line
  "set cursorline

  "tab: u25b8 ▸, eol: u00ac ¬, nbsp: u00B7 ·
  set listchars=tab:▸\ ,eol:¬,nbsp:·,trail:·
"}}}
" Editor Layout {{{
  set wildmenu                    " make tab completion for files/buffers act like bash
  set wildignore=*.swp,*.bak,*.pyc,*.class
" }}}

" Vim behaviour {{{
  set hidden
  set completeopt=menu,longest,preview

" }}}
" Shortcut mappings {{{
  nnoremap ; :

  " Avoid accidental hits of <F1> while aiming for <Esc>
  map! <F1> <Esc>

  " To return to normal mode by pressing twice j
  imap jj <Esc>

  " Quickly close the current window
  nnoremap <leader>q :q<CR>
  map <silent> <t_133>9 :Commant<CR>
  " call help with word under cursor
  noremap <leader>h :help <c-r><c-w><cr>
  " run vim command from curosr till end of line
  noremap <leader>ru y$:<c-r>" <cr>

  " Remap j and k to act as expected when used on long, wrapped, lines
  nnoremap j gj
  nnoremap k gk
  " nnoremap R "_d

  nmap <leader>rr :call MyReloadSnippets(snippets_dir, &filetype)<CR>

  " Use ,d (or ,dd or ,dj or 20,dd) to delete a line without adding it to the
  " yanked stack (also, in visual mode)
  nmap <silent> <leader>d "_d
  vmap <silent> <leader>d "_d

  vmap <leader>x "_x

  " Yank/paste to the OS clipboard with ,y and ,p
  nmap <leader>y "+y
  nmap <leader>Y "+yy
  nmap <leader>p "+p
  nmap <leader>P "+P

  nmap <leader>l :set list!<CR>

  "Indent block 
  nmap <A-h> <<
  nmap <A-l> >>
  vmap <A-h> <gv
  vmap <A-l> >gv

  " Overriden by Plugin 'christoomey/vim-tmux-navigator'
  "nnoremap <C-h> <C-w>h
  "nnoremap <C-j> <C-w>j
  "nnoremap <C-k> <C-w>k
  "nnoremap <C-l> <C-w>l

  " to close html tag
  iabbrev <// </<C-X><C-O>


" Plugin: vimux
  nnoremap <Leader>vl :VimuxRunLastCommand<CR>
  nnoremap <Leader>vs :VimuxRunCommand(expand('%:p'))<CR>

" Plugin: unimpaired
  if exists("g:loaded_unimpaired") || &cp || v:version < 700
  " Bubble single lines
    nmap <C-Up> [e
    nmap <C-Down> ]e
    " Bubble multiple lines
    vmap <C-Up> [egv
    vmap <C-Down> ]egv
  else
    " Bubble single lines
    nmap <C-Up> ddkP
    nmap <C-Down> ddp
    " " Bubble multiple lines
    vmap <C-Up> xkP`[V`]
    vmap <C-Down> xp`[V`]
  endif

  " Plugin: CTags
  nnoremap <silent> <F8> :TlistToggle<CR>
  " Plugin: NERDTree
  nnoremap <silent> <F9> :NERDTreeToggle<CR>
  " Edit the vimrc file
  nnoremap <silent> <leader>ev :e $MYVIMRC<CR>
  nnoremap <silent> <leader>sv :so $MYVIMRC<CR>


  " Enter to edited file's directory
  nmap <leader>cd :let $CURRENT_PATH=expand("%:p:h")<CR>:cd $CURRENT_PATH<CR>

  "open a file under cursor (split window) event if not exist
  map <leader>gf :sp <cfile><cr>

  " ---------    SPELL     -------------
  map zp :setlocal spell spelllang=pl<CR>
  map zP :setlocal nospell<CR>
  map ze :setlocal spell spelllang=en_us<CR>
  map zE :setlocal nospell<CR>


  " using to insert cs from cr
  "nmap <leader>c :r !powertool -g <C-R><C-W><CR>
  "nmap <leader>cx :r !powertool -x -g x<CR>

  " toggleRainbow
  nmap <leader>R :RainbowParenthsisToggle<CR>
"}}}
"
"------------------------------------------
" Omnicompletion
"------------------------------------------
" Plugins settings {{{
  " Plugin: ctrl-p
  let g:ctrlp_custom_ignore = {
    \ 'dir': '\v(\f[\/](bin|target|build))$|(\.(git|hg|svn))$|(node_modules|classes)$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ }
  " }}}

  " Plugin: supertab
  "if exists("g:SuperTabLongestEnhanced")
    let g:SuperTabLongestEnhanced = 1
    let g:SuperTabLeadingSpaceCompletion = 0
    let g:SuperTabRetainCompletionDuration='session'
  "endif
  
  " Plugin: taglist
  let Tlist_Use_Right_Window = 1
  let tlist_tex_settings='tex;c:chapters;s:sections;u:subsections;b:subsubsections;p:parts;P:paragraphs;G:subparagraphs'
  set title titlestring= "GVIM" . %<%f\%([%{Tlist_Get_Tagname_By_Line()}]%)


  " Plugin: snipmate
  " bundle/snipmate/after/plugin/snipmate
  ino <silent> <leader>s <c-r>=TriggerSnippet()<cr>
  ino <silent> <leader>, <c-r>=TriggerSnippet()<cr>
  snor <silent> <leader>, <esc>i<right><c-r>=TriggerSnippet()<cr>
  ino <silent> <leader>\< <c-r>=BackwardsSnippet()<cr>
  snor <silent> <leader>\< <esc>i<right><c-r>=BackwardsSnippet()<cr>
  ino <silent> <leader>n <c-r>=ShowAvailableSnips()<cr>

  if has('win32') || has ('win64')
      let snippets_dir=$VIMHOME . "\\snippets"
  else
      let snippets_dir=$VIMHOME . "/snippets"
  endif

  " FUNCTIONS () {{{
  function! MyReloadSnippets( snippets_dir, ft )
    if strlen( a:ft ) == 0
      let filetype = "_"
    else
      let filetype = a:ft
    endif

    call ResetSnippets(filetype)
    call GetSnippets( g:snippets_dir, filetype )
  endfunction
  
" }}}

"AutoCommand  {
augroup file-types
    autocmd!
    " Restore cursor position
    au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

    "au FileType helpfile nnoremap <buffer><cr> <c-]>   " Enter selects subject
    "au FileType helpfile nnoremap <buffer><bs> <c-T>   " Backspace to go back

    " Syntax of these languages is fussy over tabs Vs spaces
    autocmd FileType make setlocal ts=2 sts=2 sw=2 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " Customisations based on house-style (arbitrary)
    autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType mkd setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType snippet setlocal ts=2 sts=2 sw=2 noexpandtab

    autocmd FileType cccs setlocal cms=#%s 
    autocmd FileType cccs set foldmethod=marker

    "python
    autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
    autocmd FileType python set foldmethod=indent

	  autocmd Filetype java setlocal omnifunc=javacomplete#Complete

    " Treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml

    " When using mutt, text width=72
    au FileType tex :map <F2> <Esc>:w<CR>:!pdflatex -output-directory output %<CR>
    au FileType tex :map <F3> <Esc>:w<CR>:!pdflatex -output-directory output praca.tex<CR>
    "au FileType cpp,c,java,sh,pl,php,asp  set autoindent
    "au FileType cpp,c,java,sh,pl,php,asp  set smartindent
    "au FileType cpp,c,java,sh,pl,php,asp  set cindent
    "au BufRead mutt*[0-9] set tw=72

    " Automatically chmod +x Shell and Perl scripts
    "au BufWritePost   *.sh             !chmod +x %
    "au BufWritePost   *.pl             !chmod +x %
    
    " Save/restore buffer state
    au BufWinLeave * silent! mkview
    au BufWinEnter * silent! loadview

    " File formats
    "au BufNewFile,BufRead  *.pls    set syntax=dosini
    "au BufNewFile,BufRead  modprobe.conf    set syntax=modconf
    

augroup END

" Go {{{
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go', 'java', 'html'] }
" }}}

" StatusLine {
  set laststatus=2                          "to be sure status linse is visible
  " Plugin: airline
  " show buffers status 
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_nr_show = 1
  "set statusline=%f\ %m\ %r\ %=\ [%{&fileencoding}]\ [%{&ff}]\ [ft=%{&ft}]\ Line:%l/%L[%p%%]\ Col:%c\ Buf:%n\ [%b][1x%B]
  " set statusline=%-9F%m%r%h%w\ [F=%{&ff}]\ [TYPE=%Y]\ [ENC=%{&fileencoding}]\ [ASCII=\%03.3b]\ [HEX=\%02.2B]\%=[POS=%04l,%04v][%p%%]\ [LEN=%L]
  "  set statusline=
  "  set statusline+=%<\                       " cut at start
  "  set statusline+=%2*[%n%H%M%R%W]%*\        " buffer number, and flags
  "  set statusline+=%-40f\                    " relative path
  "  set statusline+=%=                        " seperate between right- and left-aligned
  "  set statusline+=%1*%y%*%*\                " file type
  "  set statusline+=%10((%l/%L)%)\            " line and column
  "  set statusline+=%P                        " percentage of file
  " }

  " Folding {
  set foldenable " Turn on folding
  set foldmarker=(fold),(end)
  set foldmethod=marker " Fold on the marker
  set foldlevel=100 " Don't autofold anything (but I can still
  " fold manually)
  " }
  "
  " GUI { default agimrLtT
  " In GVIM
  if has("gui_running")
    set guioptions-=m " turn off menu bar
    set guioptions-=T " turn off toolbar
    set guioptions-=e " remove gui tab page
    set guioptions+=c " use console dialogs for simple choices
    set guioptions-=b " remove bottom scrollbar
    set guioptions-=r
    set guioptions-=t
    set guioptions-=L

    if has("gui_gtk2")
      set guifont=Monospace\ 10
    elseif has("x11")
      " Also for GTK 1
      "set guifont=*-lucidatypewriter-medium-r-normal-*-*-180-*-*-m-*-*
    elseif has("mac")
      set guifont=Menlo\ Regular:h13
    elseif has("gui_win32")
      set guifont=DejaVu_LGC_Sans_Mono:h10:cANSI
    endif

  endif
  " }

  " }}}

  " TIPS {{{
  "Invisible character colors
  "highlight NonText guifg=#4a4a59
  "highlight SpecialKey guifg=#4a4a59

  "}}}

function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
vnoremap <C-i> :call Incr()<CR>

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set ft=%s :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no', &filetype)
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" Search for selected text, forwards or backwards.
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
